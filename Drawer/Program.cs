using System;
using System.Diagnostics;
using PathBuilder;
using Structures;

namespace Drawer
{
	public class Program
	{

		public static AStar Astar = new AStar();
		public static Bfs Bfs = new Bfs();
		public static BinaryTreeAStar Btastar = new BinaryTreeAStar();

		public static void Main(string[] args)
		{
			var dict = new Dictionary<int, string>();
			for (var i = 0; i < 25; i++)
				dict.Add(i, i.ToString());
			dict.Remove(12);
			Console.Write(dict.ToString());
			//MazeTest();
			//LongerTest();
		}


		public static void MazeTest()
		{
			var maze = new[]
			{
				"##################################################################",
				"#..#..................................#..........................#",
				"#..#.............................#....#.....................####.#",
				"#..#.###########################.#..........................#..#.#",
				"#..#.#...........................#...########################..#.#",
				"#..#.#...........................#...#.........................#.#",
				"#..#.#############################...#.............#####.......#.#",
				"#..#.........................#.......#.............#.....#.....#.#",
				"#..###########################.......#.............#.#.#.#######.#",
				"#..#.........#........#......#.......#.............#.#.#.........#",
				"#..#.....#...#.....#..#...#..#######################.#.###########",
				"#..#.....#........##......#........................#.#...........#",
				"#..#.....###########......########################.#.#...........#",
				"#..#.....#........##......#...................#..#.#.#...........#",
				"#..#.....#........##......#...#.###############..#.#.#...........#",
				"#..#.....#...##...##......#...#..................#.#.#...........#",
				"#..#.....#....#...##......#...##################.#.#.#...........#",
				"#..#.....#....#...##......#...#..................#.#.#...........#",
				"#..#.....#....#...##......#...#.##################.#.#...........#",
				"#..#.....#....#...##......#...#....................#.#...........#",
				"#..#.....#....#...##......#...######################.#...........#",
				"#..#..........#...##......#........................#.#...........#",
				"#..#############..##......#..........................#...........#",
				"#.................##......#..........................#...........#",
				"#.................##......#..........................#...........#",
				"#.................##......#..........................#...........#",
				"#.................##......#..........................#...........#",
				"#.................##......#..........................#...........#",
				"#.................##......#..........................#...........#",
				"#.................##......#..........................#...........#",
				"#.................##......#..........................#...........#",
				"#.................##......#..........................#...........#",
				"#.................##......#..........................#...........#",
				"#.................##......#..........................#...........#",
				"#.................##......#..........................#...........#",
				"#.................##......#..........................#...........#",
				"#.................##......#..........................#...........#",
				"#.................##......#..........................#...........#",
				"#.................##......#..........................#...........#",
				"##################################################################",
			};
			var field = new SimpleField(maze);
			var start = new Point(1, 1);
			var end = new Point(10, 4);
			field.FindPath(Btastar, start, end);
			field.DrawField();
			Console.WriteLine("BFS: " + RunTest(field, Bfs, start, end, 10000));
			Console.WriteLine("AStar: " + RunTest(field, Astar, start, end, 10000));
			Console.WriteLine("RBTAStar: " + RunTest(field, Btastar, start, end, 10000));
		}

		public static void LongerTest()
		{
			var maze = new[]
			{
				"##################################################################################################################################",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"#................................................................................................................................#",
				"##################################################################################################################################",
			};
			var field = new SimpleField(maze);
			var start = new Point(2, 5);
			var end = new Point(127, 20);
			field.FindPath(Btastar, start, end);
			field.DrawField();
			Console.WriteLine("BFS: " + RunTest(field, Bfs, start, end, 10000));
			Console.WriteLine("AStar: " + RunTest(field, Astar, start, end, 10000));
			Console.WriteLine("RBTAStar: " + RunTest(field, Btastar, start, end, 10000));
		}

		public static long RunTest(SimpleField field, IPathBuilder builder, Point start, Point finish, int runCount)
		{
			var watch = new Stopwatch();
			field.FindPath(Bfs, start, finish);
			watch.Start();
			for (var i = 0; i < runCount; i++)
				field.FindPath(builder, start, finish);
			watch.Stop();
			return watch.ElapsedMilliseconds;
		}
	}
}